services:
  mongo_db:
    image: mongo
    ports:
      - 27017:27017
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
      MONGO_INITDB_DATABASE: the_database
    volumes:
      - ./todo-backend/mongo/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js
    container_name: todo-mongo-nginx

  redis_db:
    image: redis
    ports:
      - 6379:6379
    command: ['redis-server', '--appendonly', 'yes'] # Overwrite the CMD
    volumes: # Declare the volume
      - ./todo-backend/redis_data:/data
    container_name: todo-redis-nginx 

  backend_dev_nginx:
    build:
      context: ./todo-backend # This will simply tell which folder to read
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-backend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    ports:
      - 3000:3000
    environment: 
      - MONGO_URL=mongodb://the_username:the_password@mongo_db:27017/the_database
      - REDIS_URL=redis://redis_db:6379
    depends_on:
      - mongo_db
      - redis_db
    container_name: back-dev-nginx # This will name the container back-dev




  front_dev_nginx:
    image: hello-front-dev
    build:
      context: ./todo-frontend # The context will pick this directory as the "build context"
      dockerfile: dev.Dockerfile # This will simply tell which dockerfile to read
    volumes:
      - ./todo-frontend/:/usr/src/app # The path can be relative, so ./ is enough to say "the same location as the docker-compose.yml"
    container_name: hello-front-dev-nginx # This will name the container hello-front-dev

  nginx:
    image: nginx:1.20.1
    volumes:
      - ./nginx.dev.conf:/etc/nginx/nginx.conf:ro
    ports:
      - 8080:80
    container_name: reverse-proxy
    depends_on:   
      - front_dev_nginx # wait for the frontend container to be started
      - backend_dev_nginx # wait for the backend container to be started